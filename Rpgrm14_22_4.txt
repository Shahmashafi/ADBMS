1.Write a MongoDB query to sort customer details in ascending order of their name.
  test> use invoice
  switched to db invoice
  invoice> db.CUSTOMER.find().sort({ customer_name: 1 })
  
  [
    {
      _id: ObjectId('67fe26fe90891dca41d861e0'),
      customer_id: 1,
      name: 'John Doe',
      city: 'Los Angeles',
      email: 'john@example.com'
    },
    {
      _id: ObjectId('67fe309e90891dca41d861e4'),
      customer_id: 2,
      name: 'Sariga Das',
      city: 'ekm',
      email: 'sarigadas121@example.com'
    },
    {
      _id: ObjectId('67fe309e90891dca41d861e5'),
      customer_id: 3,
      name: 'Radhika',
      city: 'Calicut',
      email: 'radhika@example.com'
    },
    {
      _id: ObjectId('67fe309e90891dca41d861e6'),
      customer_id: 4,
      name: 'Rachel',
      city: 'tvm',
      email: 'rachel@example.com'
    }
  ]



2.Write a MongoDB query to count number of customers in each city.
  db.CUSTOMER.aggregate([
    {
      $group: {
        _id: "$city",
        total_number_of_customers: { $sum: 1 }
      }
    }
  ])

  [
    { _id: 'Calicut', total_number_of_customers: 1 },
    { _id: 'Los Angeles', total_number_of_customers: 1 },
    { _id: 'ekm', total_number_of_customers: 2 }

  ]


3. Write a MongoDB query to find minimum and maximum age in each city.
  db.CUSTOMER.aggregate([
    {
      $group: {
        _id: "$city",
        minAge: { $min: "$age" },
        maxAge: { $max: "$age" }
      }
    }
  ]);

    { _id: 'Calicut', minAge: 89, maxAge: 89 },
    { _id: 'Los Angeles', minAge: 30, maxAge: 30 },
    { _id: 'ekm', minAge: 21, maxAge: 28 }


4.Write a MongoDB query using the $match stage to retrieve all customer documents whose customer_name starts with the letter “S”.
  invoice> db.CUSTOMER.find({
    name: { $regex: /S/ }
  })
  
  [
    {
      _id: ObjectId('67fe309e90891dca41d861e4'),
      customer_id: 2,
      name: 'Sariga Das',
      city: 'ekm',
      email: 'sarigadas121@example.com',
      age: 28
    }
  ]

5. Write a query using $lookup to join CUSTOMER and PRODUCT collections and display only customer name, product name, and price.
  invoice> db.CUSTOMER.aggregate([
  {
      $lookup: {
         from: "PRODUCT",
        localField: "product_id",
        foreignField: "product_id",
        as: "product_info"
      }
    },
   {
      $unwind: "$product_info"
    },
    {
      $project: {
        _id: 0,
        customer_name: "$name",
        product_name: "$product_info.name",
         price: "$product_info.price"
      }
     }
  ]);

  [
    { customer_name: 'John Doe', product_name: 'Laptop', price: 1200 },
    { customer_name: 'Sariga Das', product_name: 'Mouse', price: 25 },
    { customer_name: 'Radhika', product_name: 'Joystick', price: 1500 },
    { customer_name: 'Rachel', product_name: 'CPU', price: 2500 }
  ]

//VERIFIED
